UnupTown Leopard Rock
Lea Kwok
Raven (Ruiwen) Tang
pd 7
---------------------
Why Did the Leopard Rock Cross the Road?

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow we so BOSS bc...
- we determined a more approachable MVP by setting a limit for the number of words our program can handle, modifying the formatting of our crossword, and setting a deadline for when to determine if we should proceed with our crossword idea
- we reviewed our code and realized our placement of code in for loops was off, which was affecting our intersection of words in the puzzles, words were intersecting and letters were being overriden by the new word that was placed on top of it, so we needed to make sure that our algorithm accurately displayed the two words without losing letters
- we changed the way we thought about our goal, instead of trying to figure out how to code for intersections between words, we let the computer randomly generate and test intersections of words until they worked together, in this way, we only had to take care of random generation and checking of valid positions, rather than actually determining where a valid position would be

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
blah blah pesky bug...
maybe some of these will move into the Obs.Ovrcm section...
- we want to add an orientation to the word search for having words diagonally
- format the crossword in a better way so the user isn't limited to 52 word pairs, which is the entire alphabet system for uppercase and lowercase, so the intersection of the xcor and ycor is more visually clear
- have the crossword always have at least one intersection, so it looks like a typical crossword puzzle

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow! oo!...
- a while loop when taking in user input can be helpful because the while loop's condition can check if user input is valid and the content inside the loop can continuously prompt the user for a valid input and handle exceptions. In Woo.java, until the user puts in a valid number, the while loop will keep prompting them to put a valid one in
- we used TerminallyIll to modify cursor location and background/text color

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
we changed ___ to ___ bc...
- deleted an overloaded constructor that took in a 2D array as a parameter because we thought the user would not be inputting their own crossword or word search
- added an answer key to display if the user wanted to look
- added color to display for making the location of answer key apparent

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tales of wisdom gained...
||||||||||||||||||||||||||||||||||||||||||
- compile all files edited before running Woo.java, there were several times when we were getting confused about why we kept getting the same error, and it was because we were only compiling Woo.java, so our changes weren't being updated
- call the default constructor in an overloaded constructor to initialize variables and setup the instance of the class so you can be sure it will work, it's important to initialize all variables in a constructor before doing anything else, specifically for ArrayLists. We tried to add elements to an ArrayList before initialzing the variable to be a new ArrayList, which caused our error message (Exception in thread "main" java.lang.NullPointerException). The program see the variable as having a null value because it doesn't automatically initialize to a new ArrayList value, so it's important to keep that in mind. 
- when you call a method and get an error during the method call, it can be helpful to print out the arguments of the method and comment out the method call to find the issue. When we got an error attempting to pass in two ArrayLists into one of the overloaded constructors for Puzzle, we commented out the method call and printed out the two ArrayLists we were passing in to see if the issue was there.
- using the _ is helpful in differentiating between instance variables and parameters because you can still tell from similar names that the instance variable and parameter have a relationship, but you still know which one is the instance varaible
- a UML diagram is very useful for outlining our plan and checking that any class implementing our interface is in compliance with it, which is why we continuously updated our UML diagram after we first uploaded it
- remember to import ArrayList. we made this mistake multiple times and the error message will be "error: cannot find symbol" with the symbol being "class ArrayList"
- and or operators are important to keep track of, especially if you're using comparative operators like <, >, and !=, a few of the times we selected the opposite operator instead of the one we actually wanted
- implementing an answer key let us spot the mistakes in our orientation code, especially how the words intersect in the puzzles 
- we used a String filled with letters of the alphabet instead of our original idea of using an ArrayList or Array because we wanted to pick random letters, so we used substring() and Math.random() on the String instead
 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================


2022-01-13
--------------------------------------------------------------
TLK :: created repo, registered on googform
TRT :: listed possible ideas with their pros and cons on Kts
--------------------------------------------------------------

2022-01-14
--------------------------------------------------------------
TLK :: uploaded flag.jpg, configured repo as directed, chose project idea, began propro
TRT :: uploaded flag.jpg, configured repo as directed, chose project idea, began propro
--------------------------------------------------------------

2022-01-17
--------------------------------------------------------------
TLK :: reviewed propro draft, checked against formatting guidelines
TRT :: drafted propro, checked against formatting guidelines
--------------------------------------------------------------

2022-01-18
--------------------------------------------------------------
TLK :: drafted uml diagram, set up methods for Puzzle class, modified project idea + set deadline for reconsideration
TRT :: drafted uml diagram, wrote up complete variables + methods for Woo class (v1), modified project idea + set deadline for reconsideration
--------------------------------------------------------------

2022-01-19
--------------------------------------------------------------
TLK :: drafted a more complete version of PuzzleMaster interface, implemented longestWord(), toString() for Puzzle and WSearch and their constructors, achieved compiliability for Woo.java and resolved NullPointerException, created flowchart of state transitions, updated UML diagram, added content to OBSTACLES OVERCOME, COOL STUFF LEARNED, and LESSONS LEARNED, made sure README.md was in compliance with deliverables
TRT :: implemented toString() and constuctor methods for Puzzle.java, incorporated ArrayLists instead of arrays, drafted a more complete version of PuzzleMaster interface, implemented longestWord(), toString() for Puzzle and WSearch and their constructors, achieved compiliability for Woo.java and resolved NullPointerException, created flowchart of state transitions, updated UML diagram, added content to OBSTACLES OVERCOME, COOL STUFF LEARNED, and LESSONS LEARNED, made sure README.md was in compliance with deliverables
--------------------------------------------------------------

2022-01-20
--------------------------------------------------------------
TLK :: removed unnecessary methods, updated method headers with more appropriate return types and parameters, implemented setWords() method, continued building Woo.java collectWords() functionality to fill in _words and _clues arrays, tested initializing instance of WSearch in main method of Woo.java, filled puzzle with " " instead of null, added orientation in fillWords() method, fixed README.md based on examples, updated flowchart with exception 
TRT :: removed unnecessary methods, updated method headers with more appropriate return types and parameters, implemented setWords() method, continued building Woo.java collectWords() functionality to fill in _words and _clues arrays, tested initializing instance of WSearch in main method of Woo.java, filled puzzle with " " instead of null, added orientation in fillWords() method, fixed README.md based on examples, updated flowchart with exception
--------------------------------------------------------------

2022-01-21
--------------------------------------------------------------
TLK :: added two different orientations for displaying words in the word search, tested for up to 5 words
TRT :: added two different orientations for displaying words in the word search, tested for up to 5 words
--------------------------------------------------------------

2022-01-23
--------------------------------------------------------------
TLK :: added finishing touches to word search and crossword, add answer key and colors to both for display functionality, resolved intersection issue, updated UML and flowchart, completed all orientations for word search, finished fillRand() for word search
TRT :: added finishing touches to word search and crossword, add answer key and colors to both for display functionality, resolved intersection issue, updated UML and flowchart, completed all orientations for word search, finished fillRand() for word search
--------------------------------------------------------------

==============================================================
